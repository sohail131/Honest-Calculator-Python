type: edu
files:
  - name: honest_calc.py
    visible: true
    text: |
      # write your code here
      data = input("Enter an equation").split(" ")
      operators = ["+", "-", "*", "/"]
      
      if (not isinstance(data[0], int) and not isinstance(data[0], float)) or (
              not isinstance(data[2], int) and not isinstance(data[2], float)):
          print("Do you even know what numbers are? Stay focused!")
      elif data[1] not in operators:
          print("Yes ... an interesting math operation. You've slept through all classes, haven't you?")
    learner_created: false
  - name: tests.py
    visible: false
    text: |
      from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram
      import builtins
      
      
      def raise_error(message):
          raise Exception("Do not use eval() function!")
      
      
      builtins.eval = raise_error
      
      
      msg = ["Enter an equation",
             "Do you even know what numbers are? Stay focused!",
             "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
             "Yeah... division by zero. Smart move..."]
      
      data = [
                  (("2 + 1.1", "3.1"), ),
                  (("2 + m", "\n".join([msg[1], msg[0]])), ("3 + 3", "6.0")),
                  (("2 + m", "\n".join([msg[1], msg[0]])), ("3 n 3", "\n".join([msg[2], msg[0]])),
                   ("m - 2", "\n".join([msg[1], msg[0]])), ("4 * 5", "20.0"),),
                  (("2 + m", "\n".join([msg[1], msg[0]])), ("3 n 3", "\n".join([msg[2], msg[0]])),
                   ("4 / 0", "\n".join([msg[3], msg[0]])), ("4 * 5.2", "20.8"),),
                  (("2.0 + 1", "3.0"), ),
                  (("411 - 211", "200.0"), ),
      
             ]  # (input data, msg sentence])
      
      
      class HonestCalc(StageTest):
          @dynamic_test(data=data)
          def test(self, *items):
              pr = TestedProgram()
              output = pr.start()
              if msg[0] not in output:
                  return CheckResult.wrong(f"Expected: ({msg[0]})\nFound:    ({output.strip()})")
              for item in items:
                  output = pr.execute(item[0])
                  if item[1] != output.strip():
                      return CheckResult.wrong(f"Expected: ({item[1]})\nFound:    ({output.strip()})")
      
              if not pr.is_finished():
                  return CheckResult.wrong("Your program unnecessarily waiting for input.")
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          HonestCalc().run_tests()
    learner_created: false
  - name: honest_calculator.py
    visible: true
    text: |
      class HonestCalculator:
          def __init__(self):
              self.data: list = []
              self.operators: list = ["+", "-", "*", "/"]
      
          def start(self) -> None:
              self.read_user_input()
              self.check_equation()
      
          def read_user_input(self) -> None:
              self.data = input("Enter an equation\n").split(" ")
      
          def check_equation(self) -> None:
              while True:
                  if self.check_operands(self.data[0]) and self.check_operands(self.data[2]) and self.check_operator():
                      break
                  else:
                      if not self.check_operands(self.data[0]) or not self.check_operands(self.data[2]):
                          print("Do you even know what numbers are? Stay focused!")
                      elif not self.check_operator():
                          print("Yes ... an interesting math operation. You've slept through all classes, haven't you?")
      
                      self.read_user_input()
      
          @staticmethod
          def check_operands(operand: str) -> bool:
              try:
                  if "." in operand and isinstance(float(operand), float):
                      return True
                  if isinstance(int(operand), int):
                      return True
      
                  return False
              except ValueError as e:
                  return False
      
          def check_operator(self) -> bool:
              return self.data[1] in self.operators
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/15811#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 21 Oct 2022 16:26:51 UTC
record: 2
